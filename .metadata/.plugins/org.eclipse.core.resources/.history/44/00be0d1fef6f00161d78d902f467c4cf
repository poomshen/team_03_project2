<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<!--  
  class Product { 
                 private String carname="pony";
                 public Product(){}
                 public product(Sring carname){ 
                   this.carname = carname;}
                 public void print(){
                   System.out.println(this.carname);
                 }  
  }
  Product p = new Product();
  product p2 = new Product("pony");
  p.print();
  p2.print();
 -->
 <!--  
  자바스크립트에서 클래스(객체) 생성 사용하는 방법
  1. 프로토타입(prototype : 원형 , 원제품) => Java , C# 
  2. 함수기반(function base) :  1.function tank(){}  => 함수,
                              					   2.function Tank(){} => 클래스
  3. 리터럴방식 :제일 간단한 방식  => var Tank = {}
     JSON 표기 ( {} )    => 이기종간에 데이터 호환 (javascript 객체 표기를 가지고 데이터 호환)                       
     (자바스크립트 객체 표기법) 
 -->
 <script type="text/javascript">
  /* --리터럴 표기법 (json)  
     1.객체지향언어 장점 : 재사용성 (설계도)
       그렇다면 => 리터털 표기 재사용성을 가지고 있지 않다
       *설계도 생성과 동시에 객체 생성 (장점 : 편하게)
       *설계도를 미리 만들고 재사용을 하는 것은 아니다
       *설계도당 하나의 객체만 생성(only Object)
       var Product = {제품명:'사과',년도:'2016',원산지:'대구'}
       var Product2 = {제품명:'사과',년도:'2016',원산지:'대구'}
  
     --함수기반 객체 생성 (수)
     --Prototype 기반 객체 생성(목)
  */
  var Product = {제품명:'사과',년도:'2016',원산지:'대구' };
       //product 객체 ,클래스{}
       console.log(Product);
       document.write(Product.제품명+"/"+Product.년도);
       
       //함수 만들기
       var  person = {name:'홍길동',addr:'서을시 강남구 역삼동' ,
       eat:function(foood){
    	 	document.write(this.name +"/" + this.addr +" : "+foood +"냠냠");  
       }}
 
      document.write("<hr>");
       person.eat("apple");
       document.write("<br>" +person.name);
       document.write("<hr>");
       
       //속성 제거하기
       delete(Product.년도);
       
       var output ="";
       for(var key in Product){
    	   output+= "*key : "+ key +"/"+Product[key] +"<br>";
       }
       document.width(output);
    </script>
</head>
<body>
	
</body>
</html>